-module(zamqp_reg).

-behaviour(gen_server).

%% API
-export([add/1, lookup/1]).


%% Management API
-export([start_link/0]).

%% gen_server callbacks
-export([init/1,
         handle_call/3, handle_cast/2, handle_info/2,
         terminate/2, code_change/3
        ]).

%% Includes
-include_lib("zamqp.hrl").

%% Defines

%% Records
-record(state, {}).

%% ===================================================================
%% API
%% ===================================================================

%%--------------------------------------------------------------------
%% Function: done
%% @doc
%%
%% @end
%%--------------------------------------------------------------------
-spec add(_) -> ok.
%%--------------------------------------------------------------------
add(Id) ->
    link(whereis(?MODULE)),
    ets:insert(?MODULE, {Id, self()}).

%%--------------------------------------------------------------------
%% Function: done
%% @doc
%%
%% @end
%%--------------------------------------------------------------------
-spec lookup(_) -> pid().
%%--------------------------------------------------------------------
lookup(Id) ->
    case ets:lookup(?MODULE, Id) of
        [{_, Pid}] -> Pid;
        _ -> undefined
    end.

%% ===================================================================
%% Management API
%% ===================================================================

%%--------------------------------------------------------------------
%% Function: start_link() -> {ok, Pid}
%% @doc
%%   Starts the
%% @end
%%--------------------------------------------------------------------
-spec start_link() -> {ok, pid()}.
%%--------------------------------------------------------------------
start_link() -> gen_server:start_link({local, ?MODULE}, ?MODULE, no_arg, []).

%% ===================================================================
%% gen_server callbacks
%% ===================================================================

%%--------------------------------------------------------------------
-spec init(no_arg) -> {ok, #state{}}.
%%--------------------------------------------------------------------
init(no_arg) ->
    process_flag(trap_exit, true),
    ets:new(?MODULE, [named_table, public, {read_concurrency, true}]),
    {ok, #state{}}.

%%--------------------------------------------------------------------
-spec handle_call(_, _, #state{}) -> {noreply, #state{}}.
%%--------------------------------------------------------------------
handle_call(Req, _, State) ->
    ?UNEXPECTED(call, Req),
    {noreply, State}.

%%--------------------------------------------------------------------
-spec handle_cast(_, #state{}) -> {noreply, #state{}}.
%%--------------------------------------------------------------------
handle_cast(Cast, State) ->
    ?UNEXPECTED(cast, Cast),
    {noreply, State}.

%%--------------------------------------------------------------------
-spec handle_info(_, #state{}) -> {noreply, #state{}}.
%%--------------------------------------------------------------------
handle_info({'EXIT', Pid, _}, State) ->
    ets:match_delete(?MODULE, {'_', Pid}),
    {noreply, State};
handle_info(Info, State) ->
    ?UNEXPECTED(info, Info),
    {noreply, State}.

%%--------------------------------------------------------------------
-spec terminate(_, #state{}) -> ok.
%%--------------------------------------------------------------------
terminate(_, _) -> ok.

%%--------------------------------------------------------------------
-spec code_change(_, #state{}, _) -> {ok, #state{}}.
%%--------------------------------------------------------------------
code_change(_, State, _) -> {ok, State}.

%% ===================================================================
%% Internal functions.
%% ===================================================================

